#!/usr/bin/env r

## Define pipeline .yml file

pipeline <- normalizePath(
  file.path("/", "home", "rstudio", "LEEF", "pipeline", "pipeline.flowcytometer.yml"),
  mustWork = FALSE
)

if (!file.exists(pipeline)) {
  stop("pipeline.flowcytometer.yml pipeline config file does not exist in the expected directory `", dirname(pipeline), "/`!")
}

## And Run!

setwd("/home/rstudio/LEEF")

options(mc.cores = parallel::detectCores() - 1)
options(warn = 1)

library(LEEF.2)

message("\n########################################################\n")
message("\n########################################################\n")
message("\nLEEF Package Info ...\n")
pkgs <- list_LEEF_packages(versions = TRUE)
message(paste(pkgs, collapse = "\n"))
message("\n########################################################\n")
message("\n########################################################\n")

LEEF.2::init_LEEF(config_file = pipeline)

LEEF.2::process(process = FALSE)

message("\n########################################################\n")
message("\narchiving raw data ...\n"
LEEF.2.archive.default::run_archive_none_subdir(
  input = getOption("LEEF")$directories$raw,
  output = file.path(getOption("LEEF")$directories$archive, "raw")
)
LEEF.2.archive.default::run_archive_none(
  input = getOption("LEEF")$directories$general.parameter,
  output = file.path(getOption("LEEF")$directories$archive, "raw")
)
message("done\n")
message("\n########################################################\n")

message("\n########################################################\n")
message("\npre_processing ...\n")
run_pre_processors()
message("done\n")
message("\n########################################################\n")

message("\n########################################################\n")
message("\narchiving pre-processed data...\n")
LEEF.2.archive.default::run_archive_none_subdir(
  input = getOption("LEEF")$directories$pre_processed,
  output = file.path(getOption("LEEF")$directories$archive, "pre_processed")
)
message("done\n")
message("\n########################################################\n")

message("\n########################################################\n")
message("\nextracting ...\n")
run_extractors()
message("done\n")
message("\n########################################################\n")

message("\n########################################################\n")
message("\narchiving extracted data ...\n")
message("     ", getOption("LEEF")$directories$extracted)
message("     ", file.path(getOption("LEEF")$directories$archive, "extracted"))
LEEF.2.archive.default::run_archive_none_subdir(
  input = getOption("LEEF")$directories$extracted,
  output = file.path(getOption("LEEF")$directories$archive, "extracted")
)
message("done\n")
message("\n########################################################\n")


message("\n########################################################\n")
message("\nadding...\n")
run_additors()
message("done\n")
message("\n########################################################\n")

# message("\n########################################################\n")
# message("\narchiving backend ...\n")
# message("\nDISABLED\n")
# # LEEF.2.archive.default::run_archive_none(
# #   input = getOption("LEEF")$directories$backend,
# #   output = file.path(getOption("LEEF")$directories$archive, "backend_fast_only")
# # )
# # message("done\n")
# message("\n########################################################\n")
